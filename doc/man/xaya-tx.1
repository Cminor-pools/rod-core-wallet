.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.8.
.TH XAYA-TX "1" "August 2021" "xaya-tx 6eec16edfe3d" "User Commands"
.SH NAME
xaya-tx  manual page for xaya-tx 6eec16edfe3d
.SH SYNOPSIS
.B xaya-tx
[\fI\,options\/\fR] \fI\,<hex-tx> \/\fR[\fI\,commands\/\fR]  \fI\,Update hex-encoded transaction\/\fR
.br
.B xaya-tx
[\fI\,options\/\fR] \fI\,-create \/\fR[\fI\,commands\/\fR]   \fI\,Create hex-encoded transaction\/\fR
.SH DESCRIPTION
Xaya xayatx utility version v1.6.0.06eec16edfe3d
.SH OPTIONS
.HP
?
.IP
Print this help message and exit
.HP
\fBcreate\fR
.IP
Create new, empty TX.
.HP
\fBjson\fR
.IP
Select JSON output
.HP
\fBnameencoding\fR
.IP
The encoding to use for names in the JSON output (default: utf8)
.HP
\fBtxid\fR
.IP
Output only the hexencoded transaction id of the resultant transaction.
.HP
\fBvalueencoding\fR
.IP
The encoding to use for values in the JSON output (default: ascii)
.HP
\fBversion\fR
.IP
Print version and exit
.PP
Debugging/Testing options:
.PP
Chain selection options:
.HP
\fBchain=\fR<chain>
.IP
Use the chain <chain> (default: main). Allowed values: main, test,
signet, regtest
.HP
\fBsignet\fR
.IP
Use the signet chain. Equivalent to \fBchain\fR=\fI\,signet\/\fR. Note that the network
is defined by the \fBsignetchallenge\fR parameter
.HP
\fBsignetchallenge\fR
.IP
Blocks must satisfy the given script to be considered valid (only for
signet networks; defaults to the global default signet test
network challenge)
.HP
\fBsignetseednode\fR
.IP
Specify a seed node for the signet network, in the hostname[:port]
format, e.g. sig.net:1234 (may be used multiple times to specify
multiple seed nodes; defaults to the global default signet test
network seed node(s))
.HP
\fBtestnet\fR
.IP
Use the test chain. Equivalent to \fBchain\fR=\fI\,test\/\fR.
.PP
Commands:
.IP
delin=N
.IP
Delete input N from TX
.IP
delout=N
.IP
Delete output N from TX
.IP
in=TXID:VOUT(:SEQUENCE_NUMBER)
.IP
Add input to TX
.IP
locktime=N
.IP
Set TX lock time to N
.IP
nameregister=N:NAME:VALUE
.IP
Turns the existing output N into a NAME_REGISTER operation with the
given hexencoded NAME and VALUE.
.IP
nameupdate=N:NAME:VALUE
.IP
Turns the existing output N into a NAME_UPDATE operation with the given
hexencoded NAME and VALUE.
.IP
nversion=N
.IP
Set TX version to N
.IP
outaddr=VALUE:ADDRESS
.IP
Add addressbased output to TX
.IP
outdata=[VALUE:]DATA
.IP
Add databased output to TX
.IP
outmultisig=VALUE:REQUIRED:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]
.IP
Add Pay To nofm Multisig output to TX. n = REQUIRED, m = PUBKEYS.
Optionally add the "W" flag to produce a
paytowitnessscripthash output. Optionally add the "S" flag to
wrap the output in a paytoscripthash.
.IP
outpubkey=VALUE:PUBKEY[:FLAGS]
.IP
Add paytopubkey output to TX. Optionally add the "W" flag to produce a
paytowitnesspubkeyhash output. Optionally add the "S" flag to
wrap the output in a paytoscripthash.
.IP
outscript=VALUE:SCRIPT[:FLAGS]
.IP
Add raw script output to TX. Optionally add the "W" flag to produce a
paytowitnessscripthash output. Optionally add the "S" flag to
wrap the output in a paytoscripthash.
.IP
replaceable(=N)
.IP
Set RBF optin sequence number for input N (if not provided, optin all
available inputs)
.IP
sign=SIGHASHFLAGS
.IP
Add zero or more signatures to transaction. This command requires JSON
registers:prevtxs=JSON object, privatekeys=JSON object. See
signrawtransactionwithkey docs for format of sighash flags, JSON
objects.
.PP
Register Commands:
.IP
load=NAME:FILENAME
.IP
Load JSON file FILENAME into register NAME
.IP
set=NAME:JSONSTRING
.IP
Set register NAME to given JSONSTRING
